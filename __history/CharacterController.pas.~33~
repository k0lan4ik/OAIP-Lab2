unit CharacterController;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants,
  System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs;

type
  TBodyPart = record
    Local: TPoint;
    Linked: array of TBodyPart;
  end;

  TCharacter = class
  public
    Body: TBodyPart;
    Length: Integer;
    Canvas: TCanvas;
    constructor Create(const X, Y: Integer; Canvas: TCanvas);
    procedure Paint(const BodyPart: TBodyPart; const CurrentAbsolute: TPoint);
  private
    function CalculateEndPoint(length: Integer; const Target: TPoint): TPoint;
  end;

implementation

constructor TCharacter.Create(const X, Y: Integer; Canvas: TCanvas);
begin
  Length := 50;
  self.Canvas := Canvas;
  self.Body.Local := Point(X, Y);
  SetLength(self.Body.Linked, 3);
  with self.Body do
  begin
    with Linked[0] do
    begin
      Local := CalculateEndPoint(Trunc(Length * 0.75), Point(0, -1));
      SetLength(Linked, 1);
      with Linked[0] do
      begin
        Local := CalculateEndPoint(Trunc(Length * 0.75), Point(0, -1));

        SetLength(Linked, 1);
        Linked[0].Local := CalculateEndPoint(Length, Point(0, -1));
        with Linked[0] do
        begin
          SetLength(Linked, 3);
          Linked[0].Local := CalculateEndPoint(Length, Point(0, -1));

          Linked[1].Local := CalculateEndPoint(Length, Point(-1, 1));
          with Linked[1] do
          begin
            SetLength(Linked, 1);
            Linked[0].Local := CalculateEndPoint(Length, Point(0, 1));
          end;

          Linked[2].Local := CalculateEndPoint(Length, Point(1, 1));
          with Linked[2] do
          begin
            SetLength(Linked, 1);
            Linked[0].Local := CalculateEndPoint(Length, Point(0, 1));
          end;
        end;
      end;
    end;

    Linked[1].Local := CalculateEndPoint(Length, Point(-1, 1));
    with Linked[1] do
    begin
      SetLength(Linked, 1);
      Linked[0].Local := CalculateEndPoint(Length, Point(0, 1));
      with Linked[0] do
      begin
        SetLength(Linked, 1);
        Linked[0].Local := CalculateEndPoint(Trunc(Length * 0.5), Point(-1, 0));
      end;
    end;

    Linked[2].Local := CalculateEndPoint(Length, Point(1, 1));
    with Linked[2] do
    begin
      SetLength(Linked, 1);
      Linked[0].Local := CalculateEndPoint(Length, Point(0, 1));
      with Linked[0] do
      begin
        SetLength(Linked, 1);
        Linked[0].Local := CalculateEndPoint(Trunc(Length * 0.5), Point(1, 0));
      end;
    end;
  end;
  self.Canvas.Pen.Width := 3;
  self.Canvas.Pen.Color := clBlack;
  self.Canvas.Brush.Color := clWhite;
  self.Paint(Body, Point(0, 0));
end;

procedure TCharacter.Paint(const BodyPart: TBodyPart;
  const CurrentAbsolute: TPoint);
var
  i: Integer;
  NextAbsolute: TPoint;
begin

  // ¬ычисл€ем абсолютные координаты дл€ текущей точки
  NextAbsolute := Point(CurrentAbsolute.X + BodyPart.Local.X,
    CurrentAbsolute.Y + BodyPart.Local.Y);

  // –исуем линии между текущей точкой и всеми св€занными точками
  for i := 0 to High(BodyPart.Linked) do
  begin
    // –исуем линию от текущей точки к св€занной точке
    Canvas.MoveTo(NextAbsolute.X, NextAbsolute.Y);

    // ¬ычисл€ем абсолютные координаты дл€ св€занной точки
    Canvas.LineTo(NextAbsolute.X + BodyPart.Linked[i].Local.X,
      NextAbsolute.Y + BodyPart.Linked[i].Local.Y);

    // –екурсивно отрисовываем св€занные точки
    Paint(BodyPart.Linked[i], NextAbsolute);
  end;
end;

function TCharacter.CalculateEndPoint(length: Integer;
  const Target: TPoint): TPoint;
var
  deltaX, deltaY, D, normX, normY: Double;
begin
  deltaX := Target.X;
  deltaY := Target.Y;

  D := Sqrt(deltaX * deltaX + deltaY * deltaY);

  if D > 0 then
  begin
    normX := deltaX / D;
    normY := deltaY / D;
  end
  else
  begin
    normX := 0;
    normY := 0;
  end;

  deltaX := length * normX;
  deltaY := length * normY;

  Result := Point(Round(deltaX), Round(deltaY));
end;

end.
